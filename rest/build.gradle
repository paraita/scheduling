ext.encoding = {
    Properties props = new Properties()
    props.load(new FileInputStream("$rootDir/config/scheduler/settings.ini"))
    props.getProperty('pa.scheduler.job.file.encoding')
}

def functionalTestConfiguration = {
    forkEvery 1
    include 'functionaltests/**'
    systemProperties << ['rest.deploy': 'false']
    systemProperties << ['pa.scheduler.home': rootDir.absolutePath]
    systemProperties << ['pa.rm.home': rootDir.absolutePath]
    systemProperties << ['proactive.home': rootDir.absolutePath]
    systemProperties << ['proactive.configuration': file("$rootDir/config/proactive/ProActiveConfiguration.xml")]
    systemProperties << ['java.security.policy': file("$rootDir/config/security.java.policy-server").absolutePath]
    systemProperties << ['test_slice': System.getProperty("test_slice")]
    systemProperties << ['max_test_slice': System.getProperty("max_test_slice")]
    systemProperties << ['proactive.runtime.ping': false]
    systemProperties << ['file.encoding': encoding.toString()]
    testLogging {
        exceptionFormat = 'full'
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running: " + descriptor)
    }
}

// dependencies
ext.functionalTestDependencies = [
        'com.googlecode.json-simple:json-simple:1.1',
        'com.jayway.awaitility:awaitility:1.6.0',
        project(":scheduler:scheduler-server"),
        project(':rm:rm-server').sourceSets.test.output
]

subprojects {
    group = 'org.ow2.proactive_grid_cloud_portal'
}

project(':rest:rest-api') {
    dependencies {
        compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.13.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.13.Final'
        compile "org.objectweb.proactive:programming-util:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"
    }
}

project(':rest:rest-server') {
    apply plugin: 'miredot'

    miredot {
        source = sourceSets.main.allJava
        destination = sourceSets.main.output
        output {
            formats {
                'html' {
                    initialCollapseLevel = 2
                }
            }
            title = 'ProActive Workflows & Scheduling - REST API v' + version
        }
        // expires friday june 16th, 2017
        licence = 'UHJvamVjdHxvcmcub3cyLnByb2FjdGl2ZV9ncmlkX2Nsb3VkX3BvcnRhbC5yZXN0LXNlcnZlcnwyMDE2LTA2LTE3fGZhbHNlI01Dd0NGQmRGVWVDcDBjUEFNRUtHUGQ5Mis2VUhWdCtDQWhSdWpOdE0wcGRxUGdUMVNZdUREZ3lyTEJvb3FBPT0='
        restModel{
            restFramework {
                name = 'jax-rs'
            }
            titleNamingStrategies = [
                    'tag: summary',
                    'tag: title',
                    'firstsentence'
            ]
        }
    }

    dependencies {
        compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.13.Final'
        compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.13.Final'

        compile 'org.rrd4j:rrd4j:2.2.1'
        compile 'net.sf.dozer:dozer:5.5.1'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-codec:commons-codec:1.10'

        compile 'com.netiq:websockify:1.6-proactive'
        compile 'io.netty:netty:3.10.4.Final'

        compile 'org.atmosphere:atmosphere-runtime:2.3.4'

        compile project(":scheduler:scheduler-client")
        compile project(":rm:rm-client")
        compile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
        compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

        compile project(':rest:rest-api')

        testCompile functionalTestDependencies

        testCompile 'org.apache.httpcomponents:httpmime:4.2.6'
        testCompile 'org.jboss.resteasy:tjws:3.0.13.Final'

        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.eclipse.jetty:jetty-client:9.2.13.v20150730'

        runtime 'org.eclipse.jetty.websocket:websocket-server:9.2.13.v20150730'
        runtime 'org.eclipse.jetty:jetty-webapp:9.2.13.v20150730'
        runtime 'javax.servlet:javax.servlet-api:3.0.1'

        runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"
    }

    task stub(type: StubTask) {
        classes = ['org.ow2.proactive_grid_cloud_portal.scheduler.EventListener']
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist

    task proActiveWar(type: Sync, dependsOn: [classes, stub, tasks.miredot]) {
        from "src/main/webapp"

        def schedulerNodeJar = project(":scheduler:scheduler-node").standaloneJar
        from schedulerNodeJar

        into file("$rootDir/dist/war/rest")

        rename(schedulerNodeJar.outputs.files.singleFile.name, 'node.jar')

        filesMatching('**/*.html') {
            it.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['rest_api.version': project.version])
        }
    }

    task copyMiredotDoc(type: Copy) {
        from "${buildDir}/miredot"
        into "$rootDir/dist/war/rest/doc"
    }

    proActiveWar.finalizedBy(copyMiredotDoc)

    clean.dependsOn cleanProActiveWar

    rootProject.dist.dependsOn project.proActiveWar

    artifacts {
        jar
    }
}

project(':rest:rest-cli') {

    dependencies {
        compile 'commons-cli:commons-cli:1.3'
        compile 'commons-io:commons-io:2.4'
        compile 'jline:jline:2.11'

        compile 'org.apache.httpcomponents:httpclient:4.2.6'
        compile 'org.apache.httpcomponents:httpmime:4.2.6'

        compile project(":common-api")
        compile project(':rest:rest-api')

        testCompile functionalTestDependencies
        testCompile project(":rest:rest-server").sourceSets.test.output
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist

}

project(':rest:rest-client') {

    apply plugin: 'java-library-distribution'

    dependencies {
        compile 'commons-cli:commons-cli:1.3'
        compile 'commons-io:commons-io:2.4'
        compile 'jline:jline:2.11'

        compile 'org.apache.httpcomponents:httpclient:4.2.6'
        compile 'org.apache.httpcomponents:httpmime:4.2.6'
        compile 'org.atmosphere:wasync:2.1.2'

        compile project(":common-api")
        compile project(":scheduler:scheduler-api")
        compile project(':rest:rest-api')

        runtime 'xerces:xercesImpl:2.11.0'

        testCompile functionalTestDependencies
        testCompile project(':rest:rest-server').sourceSets.test.output
    }

    test {
        exclude 'functionaltests/**'
    }

    task('functionalTest', type: Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist
    clean.dependsOn rootProject.cleanDist
}

project(':rest:rest-smartproxy') {

    apply plugin: 'java-library-distribution'

    dependencies {
        compile project(':rest:rest-client')
        compile project(':scheduler:smartproxy-common')

        testCompile functionalTestDependencies
        testCompile project(':rest:rest-server').sourceSets.test.output
    }

    task bundle(type: Zip) {
        from configurations.runtime.allArtifacts.files
        from configurations.runtime
        into(project.name + '-' + project.version + '-bundle')
    }

    test {
        exclude 'functionaltests/**'
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }
    rootProject.dist.dependsOn testJar

    task dist(type: Copy) {
        from testJar
        into file("$rootDir/dist/lib")
    }

    task('functionalTest', type:Test).configure functionalTestConfiguration

    functionalTest.dependsOn rootProject.dist, dist
    clean.dependsOn rootProject.cleanDist
}